user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
	
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    client_max_body_size 100M;
    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;
	
    keepalive_timeout  65;
    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        location /static/ {
            alias /var/www/static/;
        }

        location /media/ {
            alias /var/www/media/;
        }

        location / {
            proxy_pass http://web:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}


# Robin algorithm
upstream backend {
    server backend1.example.com;
    server backend2.example.com;
}
# Least connections algorithm
upstream backend {
    least_conn;
    server backend1.example.com;
    server backend2.example.com;
}
# IP hash algorithm
upstream backend {
    ip_hash;
    server backend1.example.com;
    server backend2.example.com;
}
# Weight-based load balancing
upstream backend {
    server backend1.example.com weight=3;
    server backend2.example.com;
}
# Random load balancing
upstream backend {
    random;
    server backend1.example.com;
    server backend2.example.com;
}
# Random load balancing with least connections
upstream backend {
    random two least_conn;
    server backend1.example.com;
    server backend2.example.com;
}
